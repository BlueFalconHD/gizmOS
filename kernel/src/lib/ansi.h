#pragma once

#include <stdint.h>

#define ANSI_BASE "\033["
#define ANSI_END "m"
#define ANSI_SEP ";"

#define ANSI_COLOR_BLACK ANSI_BASE "30" ANSI_END
#define ANSI_COLOR_RED ANSI_BASE "31" ANSI_END
#define ANSI_COLOR_GREEN ANSI_BASE "32" ANSI_END
#define ANSI_COLOR_YELLOW ANSI_BASE "33" ANSI_END
#define ANSI_COLOR_BLUE ANSI_BASE "34" ANSI_END
#define ANSI_COLOR_MAGENTA ANSI_BASE "35" ANSI_END
#define ANSI_COLOR_CYAN ANSI_BASE "36" ANSI_END
#define ANSI_COLOR_WHITE ANSI_BASE "37" ANSI_END
#define ANSI_EFFECT_RESET ANSI_BASE "0" ANSI_END
#define ANSI_EFFECT_BOLD ANSI_BASE "1" ANSI_END
#define ANSI_EFFECT_FAINT ANSI_BASE "2" ANSI_END
#define ANSI_EFFECT_ITALIC ANSI_BASE "3" ANSI_END
#define ANSI_EFFECT_UNDERLINE ANSI_BASE "4" ANSI_END
#define ANSI_EFFECT_BLINK ANSI_BASE "5" ANSI_END
#define ANSI_EFFECT_REVERSE ANSI_BASE "7" ANSI_END
#define ANSI_EFFECT_CONCEAL ANSI_BASE "8" ANSI_END
#define ANSI_EFFECT_CLEARLINE ANSI_BASE "9" ANSI_END
#define ANSI_EFFECT_CLEARSCREEN ANSI_BASE "2J" ANSI_END

#define ANSI_RGB_COLOR(r, g, b) "\033[38;2;" r ";" g ";" b "m"

// Use a provided ansi code and append reset code to string
#define ANSI_APPLY(an, str) an str ANSI_EFFECT_RESET
